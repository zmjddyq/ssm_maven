<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

    <!--  扫描除了控制器的其他逻辑组件  -->
    <context:component-scan base-package="com.ssm_02">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--  导入配置文件  -->
    <context:property-placeholder location="classpath:dataSource.properties" />
    <!--  配置数据源  -->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="driverClassName" value="${jdbc.driverClassName}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <!--    连接池设置    -->
        <property name="initialSize" value="${jdbc.initialSize}"></property>
        <property name="maxActive" value="${jdbc.maxActive}"></property>
    </bean>

    <!--  配置使用mybatis操作数据库  -->
    <!--  可以根据配置文件获取SqlSessionFactory  -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--  指定配置文件所在位置  -->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="dataSource" ref="druidDataSource" />
        <!--    配置xml映射文件位置    -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>
    <!--  把每一个dao接口的实现加入到ioc容器  -->
        <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
            <!--    指定dao接口所在的包  -->
            <property name="basePackage" value="com.ssm_02.dao"></property>
        </bean>
<!--    <mybatis-spring:scan base-package="com.com.ssm_02.dao"/>-->

    <!--  配置事务管理器 ，让他控制住数据源里的连接的关闭和提交 -->
    <bean id="tm1" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="druidDataSource"></property>
    </bean>

    <!--  基于xml配置，配置事务，哪些方法切入事务还要写切入点表达式  -->
    <aop:config>
        <!--    配置切入点表达式    -->
        <aop:pointcut id="txPoint" expression="execution(* com.ssm_02.service.*.*(..))"/>
        <aop:advisor advice-ref="myTx" pointcut-ref="txPoint"></aop:advisor>
    </aop:config>

    <!--  配置事务增强、事务属性、事务建议  -->
    <tx:advice id="myTx" transaction-manager="tm1">
        <!--    配置事务属性    -->
        <tx:attributes>
            <tx:method name="*" rollback-for="java.lang.Exception"/>
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
</beans>